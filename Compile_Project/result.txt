Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 1
Reducing stack by rule 9 (line 94):
   $1 = token INT ()
-> $$ = nterm type ()
Stack now 0
Entering state 7
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 13
Reading a token: Next token is token VOID ()
Shifting token VOID ()
Entering state 18
Reading a token: Next token is token ')' ()
Reducing stack by rule 13 (line 132):
   $1 = token VOID ()
-> $$ = nterm paras ()
Stack now 0 7 11 13
Entering state 20
Next token is token ')' ()
Shifting token ')' ()
Entering state 26
Reducing stack by rule 11 (line 113):
   $1 = token ID ()
   $2 = token '(' ()
   $3 = nterm paras ()
   $4 = token ')' ()
-> $$ = nterm func ()
Stack now 0 7
Entering state 12
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 16
Reducing stack by rule 20 (line 201):
-> $$ = nterm local_decls ()
Stack now 0 7 12 16
Entering state 24
Reading a token: Next token is token RETURN ()
Reducing stack by rule 22 (line 216):
-> $$ = nterm stmt_list ()
Stack now 0 7 12 16 24
Entering state 31
Next token is token RETURN ()
Shifting token RETURN ()
Entering state 43
Reading a token: Next token is token NUM ()
Shifting token NUM ()
Entering state 40
Reducing stack by rule 58 (line 455):
   $1 = token NUM ()
-> $$ = nterm factor ()
Stack now 0 7 12 16 24 31 43
Entering state 55
Reducing stack by rule 52 (line 429):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 7 12 16 24 31 43
Entering state 54
Reading a token: Next token is token ';' ()
Reducing stack by rule 48 (line 405):
   $1 = nterm term ()
-> $$ = nterm add_expr ()
Stack now 0 7 12 16 24 31 43
Entering state 53
Next token is token ';' ()
Reducing stack by rule 40 (line 377):
   $1 = nterm add_expr ()
-> $$ = nterm simple_expr ()
Stack now 0 7 12 16 24 31 43
Entering state 52
Reducing stack by rule 36 (line 340):
   $1 = nterm simple_expr ()
-> $$ = nterm expr ()
Stack now 0 7 12 16 24 31 43
Entering state 64
Next token is token ';' ()
Shifting token ';' ()
Entering state 87
Reducing stack by rule 33 (line 311):
   $1 = token RETURN ()
   $2 = nterm expr ()
   $3 = token ';' ()
-> $$ = nterm retn_stmt ()
Stack now 0 7 12 16 24 31
Entering state 49
Reducing stack by rule 27 (line 227):
   $1 = nterm retn_stmt ()
-> $$ = nterm stmt ()
Stack now 0 7 12 16 24 31
Entering state 45
Reducing stack by rule 21 (line 208):
   $1 = nterm stmt_list ()
   $2 = nterm stmt ()
-> $$ = nterm stmt_list ()
Stack now 0 7 12 16 24
Entering state 31
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 36
Reducing stack by rule 18 (line 180):
   $1 = token '{' ()
   $2 = nterm local_decls ()
   $3 = nterm stmt_list ()
   $4 = token '}' ()
-> $$ = nterm comp_stmt ()
Stack now 0 7 12
Entering state 17
Reducing stack by rule 10 (line 103):
   $1 = nterm type ()
   $2 = nterm func ()
   $3 = nterm comp_stmt ()
-> $$ = nterm func_decl ()
Stack now 0
Entering state 8
Reducing stack by rule 5 (line 60):
   $1 = nterm func_decl ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 5
Reducing stack by rule 3 (line 44):
   $1 = nterm declaration ()
-> $$ = nterm declaration_list ()
Stack now 0
Entering state 4
Reading a token: Now at end of input.
Reducing stack by rule 1 (line 32):
   $1 = nterm declaration_list ()
-> $$ = nterm program ()
Stack now 0
Entering state 3
Now at end of input.
Shifting token $end ()
Entering state 9
Stack now 0 3 9
Cleanup: popping token $end ()
Cleanup: popping nterm program ()

program
__declaration_list
____declaration
______func_decl
________type
__________int
________func
__________main
__________(
__________paras
____________void
__________stmt_list
____________)
____________stmt
______________retn_stmt
________________return
________________expr
__________________simple_expr
____________________add_expr
______________________term
________________________factor
__________________________0
________________;
________comp_stmt
__________{
__________paras
____________void
__________stmt_list
____________)
____________stmt
______________retn_stmt
________________return
________________expr
__________________simple_expr
____________________add_expr
______________________term
________________________factor
__________________________0
________________;
__________}
